[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quarto-test",
    "section": "",
    "text": "Filter: How to remove missing values in a dataframe\n\n\n\n\n\n\n\ndata science\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nPhilip Kimani\n\n\n\n\n\n\n  \n\n\n\n\nHow to discard all but one column of interest from y when using left_join in R\n\n\n\n\n\n\n\ndata science\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nPhilip Kimani\n\n\n\n\n\n\n  \n\n\n\n\nHow to discard all but one column of interest from y when using left_join in R\n\n\n\n\n\n\n\ndata science\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nPhilip Kimani\n\n\n\n\n\n\n  \n\n\n\n\nPurr::pmap function\n\n\n\n\n\n\n\nwriting\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nLoffi Ruskins\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 1, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/drop_na/index.html",
    "href": "posts/drop_na/index.html",
    "title": "Filter: How to remove missing values in a dataframe",
    "section": "",
    "text": "In R, the drop_na() function from the tidyr package can be used to remove rows with missing values.\nHere, y should be the column number or name in your data frame df that you want to consider for missing values.\nHere’s an example of how to use drop_na() to drop rows with missing values based on a particular column:\n\nlibrary(tidyr)\n\n# create a data frame with missing values\ndf <- data.frame(\n  x = c(1, 2, NA, 4),\n  y = c(NA, 5, 6, 7)\n)\n\n# drop rows with missing values in column \"y\"\ndf2 <- drop_na(df, y)\n\n# view the result\ndf2\n\n   x y\n1  2 5\n2 NA 6\n3  4 7\n\n\nIn this example, drop_na() is used to remove rows with missing values in the “y” column of the data frame df. The resulting data frame df2 only contains the rows where “y” is not missing.\nFilter out values containing integers\nTo filter out values that contain integers in R, you can use the grepl() function with a regular expression pattern that matches integers.\nHere’s an example:\n\n# Create a sample vector\nvec <- c(\"apple\", \"banana\", \"123\", \"grape\", \"orange\")\n\n# Filter out values containing integers\nfiltered_vec <- vec[!grepl(\"\\\\d+\", vec)]\n\n# View the filtered vector\nfiltered_vec\n\n[1] \"apple\"  \"banana\" \"grape\"  \"orange\"\n\n\nIn this example, the grepl() function is used with the regular expression pattern \"\\\\d+\", which matches one or more digits. The ! operator is used to negate the result, so that values that match the pattern are filtered out. The resulting logical vector is used to subset the original vector using the [ operator.\nNote that the regular expression pattern \"\\\\d+\" matches any sequence of one or more digits. If you only want to match integers (i.e., positive and negative whole numbers), you can use the pattern \"^-?\\\\d+$\", which matches strings that start with an optional - sign, followed by one or more digits, and end with the end of the string."
  },
  {
    "objectID": "posts/left join/index.html",
    "href": "posts/left join/index.html",
    "title": "how to discard all but one column of interest from y when using left_join in R",
    "section": "",
    "text": "In the following example, x and y are sample dataframes with a common column called “common_column”. The goal is to left join these dataframes on the common column, but to only include the “column_of_interest” column from y in the resulting dataframe.\n\n# create sample dataframes x and y\nx <- data.frame(common_column = c(\"A\", \"B\", \"C\", \"D\"),\n                x_column1 = c(1, 2, 3, 4),\n                x_column2 = c(5, 6, 7, 8))\n\ny <- data.frame(common_column = c(\"A\", \"B\", \"C\", \"D\"),\n                y_column1 = c(\"apple\", \"banana\", \"carrot\", \"date\"),\n                y_column2 = c(10, 20, 30, 40),\n                column_of_interest = c(\"red\", \"yellow\", \"orange\", \"brown\"))\n\n# left join x and y, selecting only the column_of_interest column from y\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\njoined_data <- left_join(x, y %>% select(common_column, column_of_interest), \n                         by = c(\"common_column\"=\"common_column\"))\n\nThe left_join function from the dplyr package is used, and y is piped into the select function using %>%. The select function selects only the “column_of_interest” column, and the resulting dataframe with only that column is used in the left_join function with x on the common column “common_column”. The resulting dataframe, joined_data, will have all columns from x and only the “column_of_interest” column from y."
  },
  {
    "objectID": "posts/mutating joins/index.html",
    "href": "posts/mutating joins/index.html",
    "title": "How to discard all but one column of interest from y when using left_join in R",
    "section": "",
    "text": "In the following example, x and y are sample dataframes with a common column called “common_column”. The goal is to left join these dataframes on the common column, but to only include the “column_of_interest” column from y in the resulting dataframe.\n\n# create sample dataframes x and y\nx <- data.frame(common_column = c(\"A\", \"B\", \"C\", \"D\"),\n                x_column1 = c(1, 2, 3, 4),\n                x_column2 = c(5, 6, 7, 8))\n\ny <- data.frame(common_column = c(\"A\", \"B\", \"C\", \"D\"),\n                y_column1 = c(\"apple\", \"banana\", \"carrot\", \"date\"),\n                y_column2 = c(10, 20, 30, 40),\n                column_of_interest = c(\"red\", \"yellow\", \"orange\", \"brown\"))\n\n# left join x and y, selecting only the column_of_interest column from y\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\njoined_data <- left_join(x, y %>% select(common_column, column_of_interest), \n                         by = c(\"common_column\"=\"common_column\"))\n\nThe left_join function from the dplyr package is used, and y is piped into the select function using %>%. The select function selects only the “column_of_interest” column, and the resulting dataframe with only that column is used in the left_join function with x on the common column “common_column”. The resulting dataframe, joined_data, will have all columns from x and only the “column_of_interest” column from y."
  },
  {
    "objectID": "posts/my-new-post/index.html",
    "href": "posts/my-new-post/index.html",
    "title": "Purr::pmap function",
    "section": "",
    "text": "An example code for the pmap function in R using a sample dataset:\n\nlibrary(purrr)\n\n# Define a function to add three numbers\nadd_three <- function(x, y, z) {\n  return(x + y + z)\n}\n\n# Create a sample dataset\ndata <- list(\n  list(1, 2, 3),\n  list(4, 5, 6),\n  list(7, 8, 9)\n)\n\n# Use the pmap function to apply the add_three function to each list in the dataset\nresult <- pmap(data, add_three)\n\n# Print the result\nprint(result)\n\n[[1]]\n[1] 12\n\n[[2]]\n[1] 15\n\n[[3]]\n[1] 18\n\n\nIn this example, we define a simple function add_three that takes three arguments and returns their sum. We then create a sample dataset data that consists of a list of lists, where each inner list contains three numbers. Finally, we use the pmap function from the purrr package to apply the add_three function to each inner list in the dataset, resulting in a list of the sums. The resulting list is stored in the result variable and printed to the console."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]